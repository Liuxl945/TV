<template>
	<div class="content" >
		<video class="video" id="video" object-fit="fill" :src="videoSrc" @click="showModal = !showModal" @waiting="playVideo" controls="false">
		</video>
		
		<div class="timer">
			<text class="timer-text">{{timer}}</text>
		</div>
		
		<scroll-view class="nav-left" @scroll.prevent :scroll-top="scrollTop" ref="list" id="scroller" v-if="showModal" scroll-y="true" >
			<view class="list" @click="select(index)" :class="selectOldIndex === index? 'active' : ''" v-for="item,index in liveData" :key="index">
				<text class="text">{{item.channelName}}</text>
			</view>
		</scroll-view>
		
		<!-- <list class="nav-left" ref="list" id="scroller" v-if="showModal" bounce="false">
			<cell class="list" ref="cell" @click="select(index)" :class="selectOldIndex === index? 'active' : ''" v-for="item,index in liveData" :key="'index' +index">
				<text class="text">{{item.channelName}}</text>
			</cell>
		</list> -->
	</div>
</template>

<script>
	import liveData from "./live.json"
	
	const INIT_INDEX = uni.getStorageSync("selectIndex") || 0
	// const dom = uni.requireNativePlugin("dom")
	
	export default {
		data() {
			return {
				scrollTop:0,
				selectIndex: INIT_INDEX,
				selectOldIndex: INIT_INDEX,
				videoSrc: liveData[INIT_INDEX].channelUrls[0],
				liveData,
				showModal: false,
				timer: Date.now()
			}
		},
		
		created() {
			this.height = uni.getSystemInfoSync().windowHeight
			
			plus.key.addEventListener("keydown", res => {
				this.keydownBcFunc(res)
			})
			
			plus.key.addEventListener("longpressed", res => {
				if(!this.showModal) {
					return
				}
				this.keydownBcFunc(res)
			})
			
			this.timer = this.GetDateTimeToString()
			let that = this
			
			function setTimeoutTimer() {
				setTimeout(() => {
					that.timer = that.GetDateTimeToString()
					setTimeoutTimer()
				},1000)
			}
			setTimeoutTimer()
		},
		methods: {
			GetDateTimeToString() {
				let date_ = new Date();
				let year = date_.getFullYear();
				let month = date_.getMonth()+1;
				let day = date_.getDate();
				if(month<10) month = "0"+month;
				if(day<10) day = "0"+day;
				
				let hours = date_.getHours();
				let mins = date_.getMinutes();
				let secs = date_.getSeconds();
				let msecs = date_.getMilliseconds();
				if(hours<10) hours = "0"+hours;
				if(mins<10) mins = "0"+mins;
				if(secs<10) secs = "0"+secs;
				if(msecs<10) secs = "0"+msecs;
				return `${hours}:${mins}:${secs}`
			},
			
			keydownBcFunc(res) {
				let keyCode = res.keyCode
				if(keyCode === 19 || keyCode === 38) {
					// KeyUp
					if(this.selectOldIndex <= 0) {
						this.selectOldIndex = liveData.length
					}
					this.selectOldIndex -= 1
					
					if(!this.showModal) {
						this.select(this.selectOldIndex)
					}
					
					this.setScrollTop()
					
				}else if(keyCode === 20 || keyCode === 40) {
					// KeyDown
					if(this.selectOldIndex >= liveData.length - 1) {
						this.selectOldIndex = -1
					}
					this.selectOldIndex += 1
					
					if(!this.showModal) {
						this.select(this.selectOldIndex)
					}
					
					this.setScrollTop()
					
				}else if(keyCode === 21 || keyCode === 37) {
					// KeyLeft
				}else if(keyCode === 22 || keyCode === 39) {
					// KeyRight
				}else if(keyCode === 23 || keyCode === 13 || keyCode === 66) {
					// KeyEnter
					if(this.showModal) {
						this.select(this.selectOldIndex)
						this.showModal = false
					}else {
						this.showModal = true
					}
					
				}else if(keyCode === 4 || keyCode === 18 || keyCode === 24|| keyCode === 27 || keyCode === 111) {
					// KeyBack
					this.showModal = false
					this.selectOldIndex = this.selectIndex
					
				}
			},
			
			setScrollTop() {
				const LINE_HEIGHT = 26
				const NUMBER = this.height / LINE_HEIGHT
				
				setTimeout(() => {
					this.scrollTop = this.selectOldIndex * LINE_HEIGHT - (Math.floor(NUMBER / 2) * LINE_HEIGHT)
					
					// dom.scrollToElement(this.$refs.cell[10], {
					// 	offset: 1
					// })
					
				},20)
			},
			playVideo() {
				this.videoContext = uni.createVideoContext("video", this)
				console.log(this.videoContext)
				this.videoContext.play()
			},
			select(index) {
				this.selectIndex = index
				this.selectOldIndex = index
				this.videoSrc = liveData[index].channelUrls[0]
				this.showModal = false
			}
		},
		watch:{
			selectIndex(value) {
				uni.setStorage({
					key:"selectIndex",
					data:value
				})
			},
			showModal(value) {
				if(value) {
					this.$nextTick(() =>{
						this.setScrollTop()
					})
				}
			}
		}
	}
</script>

<style lang="scss">
	$width: 160rpx;
	.nav-left{
		position: fixed;
		left: 0;
		top: 0;
		width: $width;
		bottom: 0;
		background-color: rgba($color: blue, $alpha: .2);
	}
	
	.timer{
		position: fixed;
		right: 20;
		top: 10;
		.timer-text{
			color: #FFFFFF;
			font-size: 16rpx;
		}
	}
	
	.list{
		width: $width;
		height: 26;
		align-items: center;
		justify-content: center;
	}
	.active{
		background-color: blue;
	}
	
	.text{
		font-size: 16rpx;
		color: #FFFFFF;
	}
	
	.content,.video{
		position: fixed;
		left: 0;
		right: 0;
		bottom: 0;
		top: 0;
	}
</style>
